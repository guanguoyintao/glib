// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"git.umu.work/AI/uglib/ubiz/mysql/ucommon/model"
)

func newDconfig(db *gorm.DB, opts ...gen.DOOption) dconfig {
	_dconfig := dconfig{}

	_dconfig.dconfigDo.UseDB(db, opts...)
	_dconfig.dconfigDo.UseModel(&model.Dconfig{})

	tableName := _dconfig.dconfigDo.TableName()
	_dconfig.ALL = field.NewAsterisk(tableName)
	_dconfig.ID = field.NewUint64(tableName, "id")
	_dconfig.Namespace = field.NewString(tableName, "namespace")
	_dconfig.Key = field.NewString(tableName, "key")
	_dconfig.Content = field.NewString(tableName, "content")
	_dconfig.Version = field.NewInt32(tableName, "version")
	_dconfig.DeletedAt = field.NewField(tableName, "deleted_at")
	_dconfig.CreatedAt = field.NewTime(tableName, "created_at")
	_dconfig.UpdateAt = field.NewTime(tableName, "update_at")

	_dconfig.fillFieldMap()

	return _dconfig
}

type dconfig struct {
	dconfigDo dconfigDo

	ALL       field.Asterisk
	ID        field.Uint64 // id
	Namespace field.String // 业务命名空间
	Key       field.String // 配置的key，格式模板为xxx.xxx.xxx...
	Content   field.String // 配置内容
	Version   field.Int32  // 配置版本
	DeletedAt field.Field
	CreatedAt field.Time
	UpdateAt  field.Time

	fieldMap map[string]field.Expr
}

func (d dconfig) Table(newTableName string) *dconfig {
	d.dconfigDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dconfig) As(alias string) *dconfig {
	d.dconfigDo.DO = *(d.dconfigDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dconfig) updateTableName(table string) *dconfig {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint64(table, "id")
	d.Namespace = field.NewString(table, "namespace")
	d.Key = field.NewString(table, "key")
	d.Content = field.NewString(table, "content")
	d.Version = field.NewInt32(table, "version")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdateAt = field.NewTime(table, "update_at")

	d.fillFieldMap()

	return d
}

func (d *dconfig) WithContext(ctx context.Context) *dconfigDo { return d.dconfigDo.WithContext(ctx) }

func (d dconfig) TableName() string { return d.dconfigDo.TableName() }

func (d dconfig) Alias() string { return d.dconfigDo.Alias() }

func (d *dconfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dconfig) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["id"] = d.ID
	d.fieldMap["namespace"] = d.Namespace
	d.fieldMap["key"] = d.Key
	d.fieldMap["content"] = d.Content
	d.fieldMap["version"] = d.Version
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["update_at"] = d.UpdateAt
}

func (d dconfig) clone(db *gorm.DB) dconfig {
	d.dconfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dconfig) replaceDB(db *gorm.DB) dconfig {
	d.dconfigDo.ReplaceDB(db)
	return d
}

type dconfigDo struct{ gen.DO }

func (d dconfigDo) Debug() *dconfigDo {
	return d.withDO(d.DO.Debug())
}

func (d dconfigDo) WithContext(ctx context.Context) *dconfigDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dconfigDo) ReadDB() *dconfigDo {
	return d.Clauses(dbresolver.Read)
}

func (d dconfigDo) WriteDB() *dconfigDo {
	return d.Clauses(dbresolver.Write)
}

func (d dconfigDo) Session(config *gorm.Session) *dconfigDo {
	return d.withDO(d.DO.Session(config))
}

func (d dconfigDo) Clauses(conds ...clause.Expression) *dconfigDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dconfigDo) Returning(value interface{}, columns ...string) *dconfigDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dconfigDo) Not(conds ...gen.Condition) *dconfigDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dconfigDo) Or(conds ...gen.Condition) *dconfigDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dconfigDo) Select(conds ...field.Expr) *dconfigDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dconfigDo) Where(conds ...gen.Condition) *dconfigDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dconfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *dconfigDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dconfigDo) Order(conds ...field.Expr) *dconfigDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dconfigDo) Distinct(cols ...field.Expr) *dconfigDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dconfigDo) Omit(cols ...field.Expr) *dconfigDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dconfigDo) Join(table schema.Tabler, on ...field.Expr) *dconfigDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dconfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dconfigDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dconfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *dconfigDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dconfigDo) Group(cols ...field.Expr) *dconfigDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dconfigDo) Having(conds ...gen.Condition) *dconfigDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dconfigDo) Limit(limit int) *dconfigDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dconfigDo) Offset(offset int) *dconfigDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dconfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dconfigDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dconfigDo) Unscoped() *dconfigDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dconfigDo) Create(values ...*model.Dconfig) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dconfigDo) CreateInBatches(values []*model.Dconfig, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dconfigDo) Save(values ...*model.Dconfig) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dconfigDo) First() (*model.Dconfig, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dconfig), nil
	}
}

func (d dconfigDo) Take() (*model.Dconfig, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dconfig), nil
	}
}

func (d dconfigDo) Last() (*model.Dconfig, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dconfig), nil
	}
}

func (d dconfigDo) Find() ([]*model.Dconfig, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dconfig), err
}

func (d dconfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dconfig, err error) {
	buf := make([]*model.Dconfig, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dconfigDo) FindInBatches(result *[]*model.Dconfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dconfigDo) Attrs(attrs ...field.AssignExpr) *dconfigDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dconfigDo) Assign(attrs ...field.AssignExpr) *dconfigDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dconfigDo) Joins(fields ...field.RelationField) *dconfigDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dconfigDo) Preload(fields ...field.RelationField) *dconfigDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dconfigDo) FirstOrInit() (*model.Dconfig, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dconfig), nil
	}
}

func (d dconfigDo) FirstOrCreate() (*model.Dconfig, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dconfig), nil
	}
}

func (d dconfigDo) FindByPage(offset int, limit int) (result []*model.Dconfig, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dconfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dconfigDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dconfigDo) Delete(models ...*model.Dconfig) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dconfigDo) withDO(do gen.Dao) *dconfigDo {
	d.DO = *do.(*gen.DO)
	return d
}
