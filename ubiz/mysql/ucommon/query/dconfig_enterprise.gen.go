// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"git.umu.work/AI/uglib/ubiz/mysql/ucommon/model"
)

func newDconfigEnterprise(db *gorm.DB, opts ...gen.DOOption) dconfigEnterprise {
	_dconfigEnterprise := dconfigEnterprise{}

	_dconfigEnterprise.dconfigEnterpriseDo.UseDB(db, opts...)
	_dconfigEnterprise.dconfigEnterpriseDo.UseModel(&model.DconfigEnterprise{})

	tableName := _dconfigEnterprise.dconfigEnterpriseDo.TableName()
	_dconfigEnterprise.ALL = field.NewAsterisk(tableName)
	_dconfigEnterprise.ID = field.NewUint64(tableName, "id")
	_dconfigEnterprise.EnterpriseID = field.NewInt64(tableName, "enterprise_id")
	_dconfigEnterprise.Namespace = field.NewString(tableName, "namespace")
	_dconfigEnterprise.Key = field.NewString(tableName, "key")
	_dconfigEnterprise.Content = field.NewString(tableName, "content")
	_dconfigEnterprise.Version = field.NewInt32(tableName, "version")
	_dconfigEnterprise.DeletedAt = field.NewField(tableName, "deleted_at")
	_dconfigEnterprise.CreatedAt = field.NewTime(tableName, "created_at")
	_dconfigEnterprise.UpdateAt = field.NewTime(tableName, "update_at")

	_dconfigEnterprise.fillFieldMap()

	return _dconfigEnterprise
}

type dconfigEnterprise struct {
	dconfigEnterpriseDo dconfigEnterpriseDo

	ALL          field.Asterisk
	ID           field.Uint64 // id
	EnterpriseID field.Int64  // enterprise_id
	Namespace    field.String // 业务命名空间
	Key          field.String // 配置的key，格式模板为xxx.xxx.xxx...
	Content      field.String // 配置内容
	Version      field.Int32  // 配置版本
	DeletedAt    field.Field
	CreatedAt    field.Time
	UpdateAt     field.Time

	fieldMap map[string]field.Expr
}

func (d dconfigEnterprise) Table(newTableName string) *dconfigEnterprise {
	d.dconfigEnterpriseDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dconfigEnterprise) As(alias string) *dconfigEnterprise {
	d.dconfigEnterpriseDo.DO = *(d.dconfigEnterpriseDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dconfigEnterprise) updateTableName(table string) *dconfigEnterprise {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint64(table, "id")
	d.EnterpriseID = field.NewInt64(table, "enterprise_id")
	d.Namespace = field.NewString(table, "namespace")
	d.Key = field.NewString(table, "key")
	d.Content = field.NewString(table, "content")
	d.Version = field.NewInt32(table, "version")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdateAt = field.NewTime(table, "update_at")

	d.fillFieldMap()

	return d
}

func (d *dconfigEnterprise) WithContext(ctx context.Context) *dconfigEnterpriseDo {
	return d.dconfigEnterpriseDo.WithContext(ctx)
}

func (d dconfigEnterprise) TableName() string { return d.dconfigEnterpriseDo.TableName() }

func (d dconfigEnterprise) Alias() string { return d.dconfigEnterpriseDo.Alias() }

func (d *dconfigEnterprise) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dconfigEnterprise) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["id"] = d.ID
	d.fieldMap["enterprise_id"] = d.EnterpriseID
	d.fieldMap["namespace"] = d.Namespace
	d.fieldMap["key"] = d.Key
	d.fieldMap["content"] = d.Content
	d.fieldMap["version"] = d.Version
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["update_at"] = d.UpdateAt
}

func (d dconfigEnterprise) clone(db *gorm.DB) dconfigEnterprise {
	d.dconfigEnterpriseDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dconfigEnterprise) replaceDB(db *gorm.DB) dconfigEnterprise {
	d.dconfigEnterpriseDo.ReplaceDB(db)
	return d
}

type dconfigEnterpriseDo struct{ gen.DO }

func (d dconfigEnterpriseDo) Debug() *dconfigEnterpriseDo {
	return d.withDO(d.DO.Debug())
}

func (d dconfigEnterpriseDo) WithContext(ctx context.Context) *dconfigEnterpriseDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dconfigEnterpriseDo) ReadDB() *dconfigEnterpriseDo {
	return d.Clauses(dbresolver.Read)
}

func (d dconfigEnterpriseDo) WriteDB() *dconfigEnterpriseDo {
	return d.Clauses(dbresolver.Write)
}

func (d dconfigEnterpriseDo) Session(config *gorm.Session) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Session(config))
}

func (d dconfigEnterpriseDo) Clauses(conds ...clause.Expression) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dconfigEnterpriseDo) Returning(value interface{}, columns ...string) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dconfigEnterpriseDo) Not(conds ...gen.Condition) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dconfigEnterpriseDo) Or(conds ...gen.Condition) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dconfigEnterpriseDo) Select(conds ...field.Expr) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dconfigEnterpriseDo) Where(conds ...gen.Condition) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dconfigEnterpriseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *dconfigEnterpriseDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dconfigEnterpriseDo) Order(conds ...field.Expr) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dconfigEnterpriseDo) Distinct(cols ...field.Expr) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dconfigEnterpriseDo) Omit(cols ...field.Expr) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dconfigEnterpriseDo) Join(table schema.Tabler, on ...field.Expr) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dconfigEnterpriseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *dconfigEnterpriseDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dconfigEnterpriseDo) RightJoin(table schema.Tabler, on ...field.Expr) *dconfigEnterpriseDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dconfigEnterpriseDo) Group(cols ...field.Expr) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dconfigEnterpriseDo) Having(conds ...gen.Condition) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dconfigEnterpriseDo) Limit(limit int) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dconfigEnterpriseDo) Offset(offset int) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dconfigEnterpriseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dconfigEnterpriseDo) Unscoped() *dconfigEnterpriseDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dconfigEnterpriseDo) Create(values ...*model.DconfigEnterprise) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dconfigEnterpriseDo) CreateInBatches(values []*model.DconfigEnterprise, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dconfigEnterpriseDo) Save(values ...*model.DconfigEnterprise) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dconfigEnterpriseDo) First() (*model.DconfigEnterprise, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DconfigEnterprise), nil
	}
}

func (d dconfigEnterpriseDo) Take() (*model.DconfigEnterprise, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DconfigEnterprise), nil
	}
}

func (d dconfigEnterpriseDo) Last() (*model.DconfigEnterprise, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DconfigEnterprise), nil
	}
}

func (d dconfigEnterpriseDo) Find() ([]*model.DconfigEnterprise, error) {
	result, err := d.DO.Find()
	return result.([]*model.DconfigEnterprise), err
}

func (d dconfigEnterpriseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DconfigEnterprise, err error) {
	buf := make([]*model.DconfigEnterprise, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dconfigEnterpriseDo) FindInBatches(result *[]*model.DconfigEnterprise, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dconfigEnterpriseDo) Attrs(attrs ...field.AssignExpr) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dconfigEnterpriseDo) Assign(attrs ...field.AssignExpr) *dconfigEnterpriseDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dconfigEnterpriseDo) Joins(fields ...field.RelationField) *dconfigEnterpriseDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dconfigEnterpriseDo) Preload(fields ...field.RelationField) *dconfigEnterpriseDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dconfigEnterpriseDo) FirstOrInit() (*model.DconfigEnterprise, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DconfigEnterprise), nil
	}
}

func (d dconfigEnterpriseDo) FirstOrCreate() (*model.DconfigEnterprise, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DconfigEnterprise), nil
	}
}

func (d dconfigEnterpriseDo) FindByPage(offset int, limit int) (result []*model.DconfigEnterprise, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dconfigEnterpriseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dconfigEnterpriseDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dconfigEnterpriseDo) Delete(models ...*model.DconfigEnterprise) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dconfigEnterpriseDo) withDO(do gen.Dao) *dconfigEnterpriseDo {
	d.DO = *do.(*gen.DO)
	return d
}
